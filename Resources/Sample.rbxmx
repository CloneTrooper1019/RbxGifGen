<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="ScreenGui" referent="RBX55D7645E4C8B4F389481DFB86E434EFF">
		<Properties>
			<string name="Name">Sample</string>
		</Properties>
		<Item class="LocalScript" referent="RBX7DD26F7F0E184E53806D2382D190D1B9">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">PlaybackSample</string>
				<ProtectedString name="Source">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

self = script.Parent
imageDisp = self:WaitForChild(&quot;ImageDisp&quot;)
gif = require(self:WaitForChild(&quot;GIF&quot;))

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

gif:Init(imageDisp)

while true do
&#9;local nextFrame = gif:NextFrame()
&#9;imageDisp.ImageRectOffset = nextFrame
&#9;gif:Yield()
end

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</ProtectedString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBX3831B59E12184D258F5EEA9DEACF4948">
			<Properties>
				<string name="Name">GIF</string>
				<ProtectedString name="Source">----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Generated by CloneTrooper1019&apos;s GIF creator
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

gif = {}
gif.DecalURL = &quot;%DECAL_URL%&quot;;
gif.ImageSize = Vector2.new(%GIF_WIDTH%,%GIF_HEIGHT%) -- The expected crop size for the gif.
gif.MapSize = Vector2.new(%MAP_WIDTH%,%MAP_HEIGHT%) -- The expected sprite map size. May get changed if roblox&apos;s decal uploader changes the scale.
gif.Frames = %GIF_FRAMES% -- Number of frames in the gif.
gif.Interval = %GIF_DPF% -- How long to wait between each frame.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Figure out the actual assetId

local assetId = tonumber(string.match(gif.DecalURL,&quot;?id=(%d+)&quot;))
if not assetId then
&#9;error(&quot;Could not get assetId from supplied url: &quot; .. gif.DecalURL)
end

function getType(a)
&#9;local info = game:GetService(&quot;MarketplaceService&quot;):GetProductInfo(a)
&#9;return info.AssetTypeId
end

while true do
&#9;if getType(assetId) == 1 then
&#9;&#9;gif.SpriteMap = &quot;rbxassetid://&quot; .. assetId
&#9;&#9;break
&#9;else
&#9;&#9;assetId = assetId - 1
&#9;end
end

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


currentFrame = -1
root = math.floor(math.sqrt(gif.Frames))

function gif:GetImageSize()
&#9;if gif.MapSize.X &gt; 1024 or gif.MapSize.Y &gt; 1024 then
&#9;&#9;local ratio = gif.ImageSize.Y/gif.ImageSize.X
&#9;&#9;local expected = Vector2.new(1024,1024*ratio)
&#9;&#9;local alpha = (expected/gif.MapSize).X
&#9;&#9;return gif.ImageSize * alpha
&#9;else
&#9;&#9;return gif.ImageSize
&#9;end
end

function gif:GetRectOffset(frame)
&#9;-- Returns an ImageRectOffset to be used by an ImageLabel based on the current frame, and the data supplied above.
&#9;local size = gif:GetImageSize()
&#9;local x = (currentFrame % root) * size.X
&#9;local y = math.floor( (currentFrame / root) ) * size.Y
&#9;return Vector2.new(x,y)
end

function gif:NextFrame()
&#9;-- Properly increments the frames and returns a RectOffset for that frame.
&#9;-- Used for playback.
&#9;if currentFrame == gif.Frames-1 then
&#9;&#9;currentFrame = 0
&#9;else
&#9;&#9;currentFrame = currentFrame + 1
&#9;end
&#9;return gif:GetRectOffset(currentFrame)
end

function gif:SetFrame(frame)
&#9;if type(frame) == &quot;number&quot; then
&#9;&#9;currentFrame = math.floor(frame)
&#9;end
end

function gif:Init(image)
&#9;if image:IsA(&quot;ImageLabel&quot;) or image:IsA(&quot;ImageButton&quot;) then
&#9;&#9;local size = gif:GetImageSize()
&#9;&#9;image.ImageRectSize = size
&#9;&#9;image.Image = gif.SpriteMap
&#9;end
end

function gif:Yield()
&#9;-- Waits until &quot;gif.Interval&quot; seconds pass.
&#9;local t = tick()
&#9;local rs = game:GetService(&quot;RunService&quot;)
&#9;while tick()-t &lt; gif.Interval do
&#9;&#9;rs.RenderStepped:wait()
&#9;end
end

return gif

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</ProtectedString>
			</Properties>
		</Item>
		<Item class="ImageLabel" referent="RBX088C2D70A5A945C09148897E9B5D2788">
			<Properties>
				<bool name="Active">false</bool>
				<Color3 name="BackgroundColor3">4294967295</Color3>
				<float name="BackgroundTransparency">0</float>
				<Color3 name="BorderColor3">4279970357</Color3>
				<int name="BorderSizePixel">1</int>
				<bool name="ClipsDescendants">false</bool>
				<bool name="Draggable">false</bool>
				<Content name="Image"><null></null></Content>
				<Color3 name="ImageColor3">4294967295</Color3>
				<Vector2 name="ImageRectOffset">
					<X>0</X>
					<Y>0</Y>
				</Vector2>
				<Vector2 name="ImageRectSize">
					<X>0</X>
					<Y>0</Y>
				</Vector2>
				<float name="ImageTransparency">0</float>
				<string name="Name">ImageDisp</string>
				<UDim2 name="Position">
					<XS>0.5</XS>
					<XO>-160</XO>
					<YS>0.5</YS>
					<YO>-120</YO>
				</UDim2>
				<float name="Rotation">0</float>
				<UDim2 name="Size">
					<XS>0</XS>
					<XO>320</XO>
					<YS>0</YS>
					<YO>240</YO>
				</UDim2>
				<token name="SizeConstraint">0</token>
				<bool name="Visible">true</bool>
				<int name="ZIndex">1</int>
			</Properties>
		</Item>
	</Item>
</roblox>